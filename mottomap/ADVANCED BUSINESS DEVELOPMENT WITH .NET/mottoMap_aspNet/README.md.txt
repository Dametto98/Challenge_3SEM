# üèçÔ∏è MotoMap - M√≥dulo de Movimenta√ß√µes e Hist√≥rico (.NET)

O MotoMap √© um sistema desenvolvido para auxiliar na organiza√ß√£o e gest√£o dos p√°tios de motos da empresa Mottu. Este m√≥dulo espec√≠fico, desenvolvido em ASP.NET Core (C#), √© o **Dono das A√ß√µes** relacionadas √†s opera√ß√µes temporais e integra√ß√µes externas do sistema.

## üîµ Responsabilidades do M√≥dulo .NET

Este m√≥dulo √© crucial para:

- Gerenciar o hist√≥rico de todas as movimenta√ß√µes de motos.
- Registrar entradas e sa√≠das de motos no p√°tio.
- Manter o hist√≥rico de qual posi√ß√£o cada moto ocupou e por quanto tempo.
- Possibilitar integra√ß√µes com servi√ßos externos (ex: um sistema de IA para triagem de ve√≠culos).

## üë®‚Äçüíª Equipe

- Caike Dametto ‚Äì RM: 558614
- Guilherme Janunzzi ‚Äì RM: 558461

## üõ†Ô∏è Tecnologias Utilizadas

- ASP.NET Core
- C#
- Entity Framework Core (para intera√ß√£o com banco de dados)

## üß± Componentes Principais

### Entidades (Modelos EF Core)

1. **Movimentacao**: Representa o registro de uma movimenta√ß√£o de moto.
   - Atributos:
     - `id` (int): Identificador √∫nico da movimenta√ß√£o.
     - `tipo` (string/enum): Tipo da movimenta√ß√£o (ex: "ENTRADA", "SAIDA").
     - `dataHora` (DateTime): Data e hora da movimenta√ß√£o.
     - `observacoes` (string, opcional): Observa√ß√µes adicionais.
   - Relacionamentos:
     - `MotoId` (int): Chave estrangeira para a entidade Moto (gerenciada por outro servi√ßo/m√≥dulo).
     - `UsuarioId` (int): Chave estrangeira para o Usu√°rio que realizou a movimenta√ß√£o.
     - `PosicaoId` (int, opcional): Chave estrangeira para a Posi√ß√£o no p√°tio (relevante para sa√≠das ou para registrar a posi√ß√£o de entrada).

2. **HistoricoPosicao**: Mant√©m o hist√≥rico de ocupa√ß√£o das posi√ß√µes pelas motos.
   - Atributos:
     - `id` (int): Identificador √∫nico do registro de hist√≥rico.
     - `dataInicio` (DateTime): Data e hora em que a moto entrou na posi√ß√£o.
     - `dataFim` (DateTime, nullable): Data e hora em que a moto saiu da posi√ß√£o (nulo se a moto ainda est√° na posi√ß√£o).
   - Relacionamentos:
     - `MotoId` (int): Chave estrangeira para a entidade Moto.
     - `PosicaoId` (int): Chave estrangeira para a entidade Posi√ß√£o.

### Controladores (Controllers)

1. **MovimentacaoController**: Respons√°vel por gerenciar as movimenta√ß√µes de entrada e sa√≠da.
   - `POST /movimentacoes/entrada`: Registra a entrada de uma moto no p√°tio. Ao registrar uma entrada, um novo registro em HistoricoPosicao √© criado com `dataInicio` preenchida e `dataFim` nula.
   - `POST /movimentacoes/saida`: Registra a sa√≠da de uma moto. Atualiza o registro correspondente em HistoricoPosicao, preenchendo `dataFim`.

2. **HistoricoController**: Respons√°vel por consultas relacionadas ao hist√≥rico de posi√ß√µes.
   - `GET /historico/posicoes/atuais`: Consulta as posi√ß√µes atualmente ocupadas (onde `dataFim` em HistoricoPosicao √© `null`).
   - Outros endpoints podem ser adicionados para consultar hist√≥ricos completos por moto, por posi√ß√£o, etc.

## üîó Comunica√ß√£o com Outros M√≥dulos (ex: M√≥dulo Java)

A comunica√ß√£o entre este m√≥dulo .NET e outros m√≥dulos (como o de Java, que gerencia motos, filiais, etc.) √© realizada primariamente via HTTP REST.

- **M√©todo Principal**: HTTP REST.
  - Exemplo: Quando o m√≥dulo Java cadastra uma nova moto e a designa para um p√°tio, ele pode chamar o endpoint deste m√≥dulo .NET para registrar a entrada inicial:
    ```http
    POST http://api-dotnet/movimentacoes/entrada
    Content-Type: application/json

    {
      "motoId": 123,
      "posicaoId": 456,
      "usuarioId": 789,
      "observacoes": "Entrada inicial da moto no p√°tio X."
    }
    ```

- **M√©todo Avan√ßado (Opcional)**: Para cen√°rios que exigem maior desacoplamento e resili√™ncia, pode-se considerar o uso de mensageria com **Apache Kafka** ou **RabbitMQ** para comunica√ß√£o ass√≠ncrona baseada em eventos (ex: um evento `MotoPosicionadaEvent` ap√≥s uma entrada ser registrada).

## üìå Exemplo de Fluxo de C√≥digo (Registro de Entrada)

```csharp
// No MovimentacaoController.cs

[ApiController]
[Route("movimentacoes")]
public class MovimentacaoController : ControllerBase
{
    private readonly SeuDbContext _context; // Seu DbContext do EF Core

    public MovimentacaoController(SeuDbContext context)
    {
        _context = context;
    }

    [HttpPost("entrada")]
    public async Task<IActionResult> RegistrarEntrada([FromBody] MovimentacaoEntradaDto dto)
    {
        // Valida√ß√µes do DTO (omissas para brevidade)

        // Cria a movimenta√ß√£o
        var movimentacao = new Movimentacao
        {
            MotoId = dto.MotoId,
            PosicaoId = dto.PosicaoId, // Posi√ß√£o onde a moto est√° entrando
            UsuarioId = dto.UsuarioId,
            Tipo = "ENTRADA", // Ou um enum/constante
            DataHora = DateTime.UtcNow,
            Observacoes = dto.Observacoes
        };
        _context.Movimentacoes.Add(movimentacao);

        // Cria o registro no hist√≥rico de posi√ß√µes
        var historico = new HistoricoPosicao
        {
            MotoId = dto.MotoId,
            PosicaoId = dto.PosicaoId,
            DataInicio = DateTime.UtcNow,
            DataFim = null // Moto est√° atualmente nesta posi√ß√£o
        };
        _context.HistoricoPosicoes.Add(historico);

        await _context.SaveChangesAsync();

        // Pode retornar o objeto criado ou um status Ok/Created
        return CreatedAtAction(nameof(RegistrarEntrada), new { id = movimentacao.Id }, movimentacao);
    }

    // DTO para o corpo da requisi√ß√£o de entrada
    public class MovimentacaoEntradaDto
    {
        public int MotoId { get; set; }
        public int PosicaoId { get; set; }
        public int UsuarioId { get; set; }
        public string? Observacoes { get; set; }
    }
}

# üöÄ Como Executar o Projeto

---

## ‚úÖ Pr√©-requisitos

* .NET SDK (vers√£o 6.0 ou superior recomendada)
* Um ambiente de desenvolvimento integrado (IDE) como Visual Studio, JetBrains Rider ou Visual Studio Code.
* Acesso a um banco de dados compat√≠vel com EF Core (ex: SQL Server, PostgreSQL, SQLite) e string de conex√£o configurada em `appsettings.json`.

---

## üîß Passo a Passo

1.  **Clone o reposit√≥rio**
    ```bash
    git clone <URL_DO_SEU_REPOSITORIO_DOTNET>
    cd <NOME_DA_PASTA_DO_PROJETO_DOTNET>
    ```

2.  **Configure o Banco de Dados**
    * Atualize a string de conex√£o em `appsettings.json` (e `appsettings.Development.json`).
    * Aplique as migra√ß√µes do EF Core (se estiver usando Code First):
        ```bash
        dotnet ef database update
        ```

3.  **Execute o projeto**
    ```bash
    dotnet run
    ```
    Ou execute diretamente pela sua IDE.

4.  **Acesse a documenta√ß√£o da API (Swagger/OpenAPI)**
    Por padr√£o, geralmente dispon√≠vel em: `http://localhost:<PORTA>/swagger` (ex: `http://localhost:5001/swagger`)

---

## üîó Endpoints da API

### Movimenta√ß√µes (`/movimentacoes`)

| M√©todo | Endpoint         | Descri√ß√£o                                                       |
| :----- | :--------------- | :-------------------------------------------------------------- |
| POST   | `/entrada`       | Registra a entrada de uma moto no p√°tio e cria hist√≥rico.      |
| POST   | `/saida`         | Registra a sa√≠da de uma moto e atualiza dataFim no hist√≥rico. |
| GET    | `/{id}`          | Busca uma movimenta√ß√£o espec√≠fica por ID.                     |
| GET    | `/moto/{motoId}` | Lista todas as movimenta√ß√µes de uma moto espec√≠fica.          |

*Exportar para as Planilhas*

### Hist√≥rico de Posi√ß√µes (`/historico`)

| M√©todo | Endpoint             | Descri√ß√£o                                                              |
| :----- | :------------------- | :--------------------------------------------------------------------- |
| GET    | `/posicoes/atuais`   | Lista todas as motos e suas posi√ß√µes atuais (dataFim == null).        |
| GET    | `/moto/{motoId}`     | Lista todo o hist√≥rico de posi√ß√µes de uma moto espec√≠fica.            |
| GET    | `/posicao/{posicaoId}`| Lista todo o hist√≥rico de ocupa√ß√£o de uma posi√ß√£o espec√≠fica.          |

*Exportar para as Planilhas*

*(Obs: Alguns endpoints acima s√£o sugest√µes e podem precisar ser implementados conforme a necessidade.)*

---

## üóÇÔ∏è Estrutura Sugerida do Projeto (ASP.NET Core Web API)

```plaintext
SEU_PROJETO_DOTNET/
‚îú‚îÄ‚îÄ Controllers/                # Controladores da API
‚îÇ   ‚îú‚îÄ‚îÄ MovimentacaoController.cs
‚îÇ   ‚îî‚îÄ‚îÄ HistoricoController.cs
‚îú‚îÄ‚îÄ Data/                       # DbContext e Migra√ß√µes do EF Core
‚îÇ   ‚îú‚îÄ‚îÄ SeuDbContext.cs
‚îÇ   ‚îî‚îÄ‚îÄ Migrations/
‚îú‚îÄ‚îÄ Dtos/                       # Objetos de Transfer√™ncia de Dados
‚îÇ   ‚îú‚îÄ‚îÄ MovimentacaoDto.cs
‚îÇ   ‚îî‚îÄ‚îÄ HistoricoPosicaoDto.cs
‚îú‚îÄ‚îÄ Models/                     # Entidades do Dom√≠nio (EF Core)
‚îÇ   ‚îú‚îÄ‚îÄ Movimentacao.cs
‚îÇ   ‚îî‚îÄ‚îÄ HistoricoPosicao.cs
‚îú‚îÄ‚îÄ Services/                   # L√≥gica de neg√≥cios (opcional, pode estar nos controllers para projetos menores)
‚îú‚îÄ‚îÄ appsettings.json            # Configura√ß√µes da aplica√ß√£o
‚îú‚îÄ‚îÄ appsettings.Development.json # Configura√ß√µes de desenvolvimento
‚îú‚îÄ‚îÄ Program.cs                  # Configura√ß√£o e inicializa√ß√£o da aplica√ß√£o
‚îú‚îÄ‚îÄ SeuProjetoDotNet.csproj     # Arquivo de projeto .NET
‚îî‚îÄ‚îÄ README.md                   # Este arquivo

## üìÖ Licen√ßa
**MotoMap ¬© 2025 - FIAP**\
Todos os direitos reservados.